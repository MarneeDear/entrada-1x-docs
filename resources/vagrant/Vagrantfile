# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 22, host: 22
  config.vm.network "forwarded_port", guest: 80, host: 80
  config.vm.network "forwarded_port", guest: 443, host: 443
  config.vm.network "forwarded_port", guest: 3306, host: 3306

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "../../Sites", "/var/www"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    echo "Provisioning your Entrada development machine."

    echo "Setting the hostname to entrada.dev..."

    echo "127.0.0.1 entrada.dev" >> /etc/hosts

    echo "Setting the virtual machine timezone..."

    echo "America/Toronto" > /etc/timezone
    dpkg-reconfigure -f noninteractive tzdata > /dev/null

    echo "Installing and updating all of the Ubuntu packages. This may take some time..."

    # Set the MySQL root password to 'password'
    echo mysql-server mysql-server/root_password select password | debconf-set-selections
    echo mysql-server mysql-server/root_password_again select password | debconf-set-selections

    # Install the required packages on the VM.
    apt-get -qy update
    apt-get -qy install openssl \
                apache2 \
                php5 \
                php5-cli \
                php5-mysql \
                php5-gd \
                php5-imap \
                php5-ldap \
                libapache2-mod-php5 \
                php5-mcrypt \
                php-pear \
                php5-pspell \
                php-soap \
                php5-xmlrpc \
                php5-curl \
                git \
                htmldoc \
                wkhtmltopdf \
                mysql-server \
                mysql-client \
                curl \
                capistrano

    echo "Setting up the PHP configuration file..."

    # Change PHP values in Apache2 and CLI php.ini
    #sed -n -i -e 's/error_reporting = E_ALL \& ~E_DEPRECATED \& ~E_STRICT/error_reporting = E_ALL \& ~E_NOTICE \& ~E_STRICT \& ~E_DEPRECATED/g' /etc/php5/apache2/php.ini
    #sed -n -i -e 's/display_errors = Off/display_errors = On/g' /etc/php5/apache2/php.ini
    #sed -n -i -e 's/upload_max_filesize = 2M/upload_max_filesize = 250M/g' /etc/php5/apache2/php.ini
    #sed -n -i -e 's/post_max_size = 8M/post_max_size = 250M/g' /etc/php5/apache2/php.ini
    #sed -n -i -e 's/error_reporting = E_ALL \& ~E_DEPRECATED \& ~E_STRICT/error_reporting = E_ALL \& ~E_NOTICE \& ~E_STRICT \& ~E_DEPRECATED/g' /etc/php5/cli/php.ini
    #sed -n -i -e 's/display_errors = Off/display_errors = On/g' /etc/php5/cli/php.ini

    echo "Installing an Apache configuration file..."

    # Download development Apache configuration file from entrada-1x-docs.
    curl -s -o /etc/apache2/sites-available/entrada.conf https://raw.githubusercontent.com/EntradaProject/entrada-1x-docs/master/resources/apache/entrada.conf

    # Configure Apache
    a2dissite 000-default > /dev/null
    a2ensite entrada > /dev/null
    a2enmod rewrite > /dev/null
    a2enmod ssl > /dev/null

    # Restart Apache
    service apache2 restart

    echo "Installing Composer for PHP dependency management..."
    curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

    echo "All finished. Happy Entrada-ing."
  SHELL
end
